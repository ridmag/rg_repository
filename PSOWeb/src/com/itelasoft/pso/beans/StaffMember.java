package com.itelasoft.pso.beans;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Store;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : pso
//  @ Author : Tharindu
//
//

@SuppressWarnings("serial")
@Entity
@Indexed(index="Staff")
@Table(name = "staffmembers")
public class StaffMember extends User implements Serializable{
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String staffId;
	private Date dob;
	private String gender;
	private StaffType type;
	private LeavePolicy leavePolicy;
	private FileData photo;
	private Date joinedDate;
	private Date serviceEndDate;
	private List<StaffSkill> skills;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String status;
	private EnumEmploymentType employmentType;
	private List<Leave> leaves;
	private boolean active;
	private List<StaffCheckRecord> staffCheckRecordList;
	private double totalWorkHours;
	private List<WeekDay> unAvailableDays = new ArrayList<WeekDay>();
	private List<LeaveCategory> leaveCategories;
	private double hoursperFortnight;
	private double allocatedHours;

	public Date getDob() {
		return dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@ManyToOne
	@JoinColumn(name = "stafftypeid")
	public StaffType getType() {
		return type;
	}

	public void setType(StaffType type) {
		this.type = type;
	}

	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "photoId")
	public FileData getPhoto() {
		return photo;
	}

	public void setPhoto(FileData photo) {
		this.photo = photo;
	}

	public void setStaffId(String staffId) {
		this.staffId = staffId;
	}

	public String getStaffId() {
		return staffId;
	}

	public void setJoinedDate(Date joinedDate) {
		this.joinedDate = joinedDate;
	}

	public Date getJoinedDate() {
		return joinedDate;
	}

	public void setServiceEndDate(Date serviceEndDate) {
		this.serviceEndDate = serviceEndDate;
	}

	public void setSkills(List<StaffSkill> skills) {
		this.skills = skills;
	}

	@OneToMany(mappedBy = "staffMember")
	@LazyCollection(value = LazyCollectionOption.FALSE)
	@Cascade(value = { org.hibernate.annotations.CascadeType.DELETE_ORPHAN,
			org.hibernate.annotations.CascadeType.SAVE_UPDATE })
	public List<StaffSkill> getSkills() {
		return skills;
	}

	public Date getServiceEndDate() {
		return serviceEndDate;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getStatus() {
		return status;
	}

	public void setLeaves(List<Leave> leaves) {
		this.leaves = leaves;
	}

	@OneToMany(mappedBy = "staffMember")
	@Cascade(value = { org.hibernate.annotations.CascadeType.DELETE_ORPHAN,
			org.hibernate.annotations.CascadeType.SAVE_UPDATE })
	public List<Leave> getLeaves() {
		return leaves;
	}

	public void setLeavePolicy(LeavePolicy leavePolicy) {
		this.leavePolicy = leavePolicy;
	}

	@ManyToOne
	@JoinColumn(name = "leavePolicyId")
	public LeavePolicy getLeavePolicy() {
		return leavePolicy;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@Transient
	public boolean isActive() {
		return active;
	}

	public void setStaffCheckRecordList(
			List<StaffCheckRecord> staffCheckRecordList) {
		this.staffCheckRecordList = staffCheckRecordList;
	}

	@OneToMany(mappedBy = "staffMember")
	@LazyCollection(LazyCollectionOption.FALSE)
	@Cascade(value = { org.hibernate.annotations.CascadeType.DELETE_ORPHAN,
			org.hibernate.annotations.CascadeType.SAVE_UPDATE })
	public List<StaffCheckRecord> getStaffCheckRecordList() {
		return staffCheckRecordList;
	}

	@Enumerated(EnumType.STRING)
	public EnumEmploymentType getEmploymentType() {
		return employmentType;
	}

	public void setEmploymentType(EnumEmploymentType employmentType) {
		this.employmentType = employmentType;
	}

	public void setTotalWorkHours(double totalWorkHours) {
		this.totalWorkHours = totalWorkHours;
	}

	@Transient
	public double getTotalWorkHours() {
		return totalWorkHours;
	}

	public void setUnAvailableDays(List<WeekDay> unAvailableDays) {
		this.unAvailableDays = unAvailableDays;
	}
	
	@ManyToMany(cascade = CascadeType.PERSIST)
	@LazyCollection(value = LazyCollectionOption.FALSE)
	@JoinTable(name = "StaffNotAvailableDayXRef", joinColumns = @JoinColumn(name = "staffId"), inverseJoinColumns = @JoinColumn(name = "weekdayId"))
	public List<WeekDay> getUnAvailableDays() {
		return unAvailableDays;
	}
	
	@Transient
	public double getAllocatedHours() {
		return allocatedHours;
	}

	public void setAllocatedHours(double allocatedHours) {
		this.allocatedHours = allocatedHours;
	}

	public void setLeaveCategories(List<LeaveCategory> leaveCategories) {
		this.leaveCategories = leaveCategories;
	}

	@OneToMany(mappedBy = "staffMember", cascade = CascadeType.ALL)
	public List<LeaveCategory> getLeaveCategories() {
		return leaveCategories;
	}

	public double getHoursperFortnight() {
		return hoursperFortnight;
	}

	public void setHoursperFortnight(double hoursperFortnight) {
		this.hoursperFortnight = hoursperFortnight;
	}

}
