package com.itelasoft.pso.beans;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.DateBridge;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.Store;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : pso
//  @ Author : Tharindu
//
//

@Entity
@Indexed
@Table(name = "students")
@Component
public class Student extends BaseEntity {
	private Long id;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String mdsid;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String cisid;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	@DateBridge(resolution = org.hibernate.search.annotations.Resolution.DAY)
	private Date dob;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String gender;
	@IndexedEmbedded(depth = 1)
	private Contact contact;
	@IndexedEmbedded(depth = 1)
	private Contact mailingAddress;
	private FileData photo;
	@IndexedEmbedded
	private List<SpecialNeed> specialNeeds;
	@IndexedEmbedded
	private List<GroupedStudent> groups;
	private List<StudentFundingSource> fundingSrcs;
	private List<Guardian> guardians;
	// private StudentFundingSource activeFundingSrc;
	// private List<Contact> guardians;
	private boolean transport;
	private List<StudentConsent> studentConsents = new ArrayList<StudentConsent>();
	private Boolean isMailAddressDefault = false;
	// private Long photoId;
	@Field(index = Index.YES, analyze = Analyze.YES, store = Store.NO)
	private String status;
	private Date serviceEndDate;
	private Date startFrom;
	private String ndisNumber;
	private String paymentMethod;
	private List<NdisCommittedEvent> ndisCommittedEvents;
	private List<NdisAncillaryCost> ndisAncillaryCosts;
	private Double chargeAmount;
	private List<NdisContribution> contributions;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Date getDob() {
		return dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "contactId")
	public Contact getContact() {
		return contact;
	}

	public void setContact(Contact contact) {
		this.contact = contact;
	}

	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "photoId")
	public FileData getPhoto() {
		return photo;
	}

	public void setPhoto(FileData photo) {
		this.photo = photo;
	}

	@ManyToMany(cascade = CascadeType.PERSIST)
	@LazyCollection(value = LazyCollectionOption.FALSE)
	@JoinTable(name = "StudentSpecialNeedsXRef", joinColumns = @JoinColumn(name = "studentId") , inverseJoinColumns = @JoinColumn(name = "specialNeedId") )
	public List<SpecialNeed> getSpecialNeeds() {
		return specialNeeds;
	}

	public void setSpecialNeeds(List<SpecialNeed> specialNeeds) {
		this.specialNeeds = specialNeeds;
	}

	public void setFundingSrcs(List<StudentFundingSource> fundingSrcs) {
		this.fundingSrcs = fundingSrcs;
	}

	@Transactional
	public void testMe(String str) {

	}

	@OneToMany(mappedBy = "student", cascade = CascadeType.ALL)
	public List<StudentFundingSource> getFundingSrcs() {
		return fundingSrcs;
	}

	/*
	 * public void setGuardians(List<Contact> guardians) { this.guardians =
	 * guardians; }
	 * 
	 * @ManyToMany(cascade = CascadeType.ALL)
	 * 
	 * @JoinTable(name = "StudentGuardiansXRef", joinColumns = @JoinColumn(name
	 * = "studentId"), inverseJoinColumns = @JoinColumn(name = "contactId",
	 * insertable = true, updatable = true)) public List<Contact> getGuardians()
	 * { return guardians; }
	 */

	public void setTransport(boolean transport) {
		this.transport = transport;
	}

	public boolean isTransport() {
		return transport;
	}

	public void setGroups(List<GroupedStudent> groups) {
		this.groups = groups;
	}

	@OneToMany(mappedBy = "student", orphanRemoval = true)
	@Cascade(value = org.hibernate.annotations.CascadeType.SAVE_UPDATE)
	public List<GroupedStudent> getGroups() {
		return groups;
	}

	public void setMdsid(String mdsid) {
		this.mdsid = mdsid;
	}

	public String getMdsid() {
		return mdsid;
	}

	public void setCisid(String cisid) {
		this.cisid = cisid;
	}

	public String getCisid() {
		return cisid;
	}

	public void setMailingAddress(Contact mailingAddress) {
		this.mailingAddress = mailingAddress;
	}

	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "mailingAddress")
	public Contact getMailingAddress() {
		return mailingAddress;
	}

	public void setStudentConsents(List<StudentConsent> studentConsents) {
		this.studentConsents = studentConsents;
	}

	@OneToMany(mappedBy = "student", orphanRemoval = true)
	@LazyCollection(LazyCollectionOption.FALSE)
	@Cascade(value = { org.hibernate.annotations.CascadeType.SAVE_UPDATE })
	public List<StudentConsent> getStudentConsents() {
		return studentConsents;
	}

	// public void setActiveFundingSrc(StudentFundingSource activeFundingSrc) {
	// this.activeFundingSrc = activeFundingSrc;
	// }

	// @ManyToOne
	// @JoinColumn(name = "activeFundingSrcId")
	// public StudentFundingSource getActiveFundingSrc() {
	// return activeFundingSrc;
	// }

	public void setMailAddressDefault(Boolean isMailAddressDefault) {
		this.isMailAddressDefault = isMailAddressDefault;
	}

	public Boolean getMailAddressDefault() {
		return isMailAddressDefault;
	}

	public void setGuardians(List<Guardian> guardians) {
		this.guardians = guardians;
	}

	@OneToMany(mappedBy = "student", cascade = CascadeType.ALL)
	public List<Guardian> getGuardians() {
		return guardians;
	}

	/*
	 * public void setPhotoId(Long photoId) { this.photoId = photoId; }
	 * 
	 * public Long getPhotoId() { return photoId; }
	 */

	public void setStatus(String status) {
		this.status = status;
	}

	public String getStatus() {
		return status;
	}

	public void setServiceEndDate(Date serviceEndDate) {
		this.serviceEndDate = serviceEndDate;
	}

	public Date getServiceEndDate() {
		return serviceEndDate;
	}

	public Date getStartFrom() {
		return startFrom;
	}

	public void setStartFrom(Date startFrom) {
		this.startFrom = startFrom;
	}

	public String getNdisNumber() {
		return ndisNumber;
	}

	public void setNdisNumber(String ndisNumber) {
		this.ndisNumber = ndisNumber;
	}

	public String getPaymentMethod() {
		return paymentMethod;
	}

	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	@OneToMany(mappedBy = "participant", cascade = CascadeType.ALL)
	public List<NdisCommittedEvent> getNdisCommittedEvents() {
		return ndisCommittedEvents;
	}

	public void setNdisCommittedEvents(List<NdisCommittedEvent> ndisCommittedEvents) {
		this.ndisCommittedEvents = ndisCommittedEvents;
	}

	@OneToMany(mappedBy = "student", cascade = CascadeType.PERSIST)
	public List<NdisAncillaryCost> getNdisAncillaryCosts() {
		return ndisAncillaryCosts;
	}

	public void setNdisAncillaryCosts(List<NdisAncillaryCost> ndisAncillaryCosts) {
		this.ndisAncillaryCosts = ndisAncillaryCosts;
	}

	@OneToMany(mappedBy = "student", cascade = CascadeType.ALL)
	public List<NdisContribution> getContributions() {
		return contributions;
	}

	public void setContributions(List<NdisContribution> contributions) {
		this.contributions = contributions;
	}

	@Transient
	public Double getChargeAmount() {
		return chargeAmount;
	}

	public void setChargeAmount(Double chargeAmount) {
		this.chargeAmount = chargeAmount;
	}

}
