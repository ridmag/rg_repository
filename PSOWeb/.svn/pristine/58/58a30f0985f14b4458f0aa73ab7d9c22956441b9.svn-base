package com.itelasoft.pso.beans;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : pso
//  @ Author : Tharindu
//
//

@Entity
@Table(name = "programevents")
public class ProgramEvent extends BaseEntity {
	private Long id;
	private Program program;
	private Date eventDate;
	private Date startTime;
	private Date endTime;
	private Date actualStartTime;
	private Date actualEndTime;
	// private Date actualReturnStartTime;
	// private Date actualReturnEndTime;
	private StudentGroup group;
	private StaffMember coordinator;
	private String status;
	private boolean lunchIncluded;
	private double chargeAmount;
	private double totalMoneyCollected;
	private double totalEFTCollected;
	private Location location;
	private Vehicle vehicle;
	private int printedUserId;
	private Date printedDate;
	private Date generatedDate;
	private Date completedDate;
	private Date bankedDate;
	private boolean invoiced;
	private List<StaffEvent> staffEvents;
	private List<StudentEvent> studentEvents;

	private SimpleDateFormat formatTime = new SimpleDateFormat("hh:mm a");
	private SimpleDateFormat formatDate = new SimpleDateFormat(
			"dd/MM/yyyy - EEE : ");

	private ProgramEvent returnEvent;

	// Roster related transient variables
	private String eventColor;
	private String eventTitle;
	private String vehicleColor;
	private HashMap<Long, String> staffAvailabilityMap;
	private Boolean overridePrice;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne
	@JoinColumn(name = "programId")
	public Program getProgram() {
		return program;
	}

	public void setProgram(Program program) {
		this.program = program;
	}

	public Date getEventDate() {
		return eventDate;
	}

	public void setEventDate(Date eventDate) {
		this.eventDate = eventDate;
	}

	public Date getStartTime() {
		return startTime;
	}

	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}

	public Date getEndTime() {
		return endTime;
	}

	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@ManyToOne
	@JoinColumn(name = "locationId")
	public Location getLocation() {
		return location;
	}

	public void setLocation(Location location) {
		this.location = location;
	}

	@Transient
	public String getName() {
		return formatDate.format(eventDate) + group.getName();
	}

	public void setVehicle(Vehicle vehicle) {
		this.vehicle = vehicle;
	}

	@ManyToOne
	@JoinColumn(name = "vehicleId")
	public Vehicle getVehicle() {
		return vehicle;
	}

	public void setPrintedUserId(int printedUserId) {
		this.printedUserId = printedUserId;
	}

	public int getPrintedUserId() {
		return printedUserId;
	}

	public void setPrintedDate(Date printedDate) {
		this.printedDate = printedDate;
	}

	public Date getPrintedDate() {
		return printedDate;
	}

	public void setGeneratedDate(Date generatedDate) {
		this.generatedDate = generatedDate;
	}

	public Date getGeneratedDate() {
		return generatedDate;
	}

	@OneToMany(mappedBy = "proEvent", cascade = CascadeType.ALL)
	// @LazyCollection(value = LazyCollectionOption.FALSE)
	public List<StudentEvent> getStudentEvents() {
		return studentEvents;
	}

	public void setStudentEvents(List<StudentEvent> studentEvents) {
		this.studentEvents = studentEvents;
	}

	public void setGroup(StudentGroup group) {
		this.group = group;
	}

	@ManyToOne
	@JoinColumn(name = "studentGroupId")
	public StudentGroup getGroup() {
		return group;
	}

	public Date getCompletedDate() {
		return completedDate;
	}

	public void setCompletedDate(Date completedDate) {
		this.completedDate = completedDate;
	}

	public boolean isInvoiced() {
		return invoiced;
	}

	public void setInvoiced(boolean invoiced) {
		this.invoiced = invoiced;
	}

	public void setActualStartTime(Date actualStartTime) {
		this.actualStartTime = actualStartTime;
	}

	public Date getActualStartTime() {
		return actualStartTime;
	}

	public void setActualEndTime(Date actualEndTime) {
		this.actualEndTime = actualEndTime;
	}

	public Date getActualEndTime() {
		return actualEndTime;
	}

	public void setStaffEvents(List<StaffEvent> staffEvents) {
		this.staffEvents = staffEvents;
	}

	// @OneToMany(mappedBy = "programEvent")
	@OneToMany(mappedBy = "programEvent", cascade = CascadeType.ALL)
	// @Cascade(value = { org.hibernate.annotations.CascadeType.ALL,
	// org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
	// @LazyCollection(value = LazyCollectionOption.FALSE)
	// @JoinTable(name = "ProgramEventCoordinatorXRef", joinColumns =
	// @JoinColumn(name = "programEventId"), inverseJoinColumns =
	// @JoinColumn(name = "coordinatorId"))
	public List<StaffEvent> getStaffEvents() {
		return staffEvents;
	}

	@Transient
	public String getTotalMoneyCollectedString() {
		String output = "";
		if (totalMoneyCollected != 0) {
			output = "$"
					+ BigDecimal.valueOf(totalMoneyCollected)
							.setScale(2, BigDecimal.ROUND_HALF_UP).toString();
		}
		if (totalEFTCollected != 0) {
			if (output.isEmpty())
				output = "EFT: $"
						+ BigDecimal.valueOf(totalEFTCollected)
								.setScale(2, BigDecimal.ROUND_HALF_UP)
								.toString();
			else
				output = output
						+ " + "
						+ BigDecimal.valueOf(totalEFTCollected)
								.setScale(2, BigDecimal.ROUND_HALF_UP)
								.toString() + "(EFT)";
		}
		if (output.isEmpty())
			output = "$0.00";
		return output;
	}

	public boolean isLunchIncluded() {
		return lunchIncluded;
	}

	public void setLunchIncluded(boolean lunchIncluded) {
		this.lunchIncluded = lunchIncluded;
	}

	public void setChargeAmount(double chargeAmount) {
		this.chargeAmount = chargeAmount;
	}

	public double getChargeAmount() {
		return chargeAmount;
	}

	public void setTotalMoneyCollected(double totalMoneyCollected) {
		this.totalMoneyCollected = totalMoneyCollected;
	}

	public double getTotalMoneyCollected() {
		return totalMoneyCollected;
	}

	public void setTotalEFTCollected(double totalEFTCollected) {
		this.totalEFTCollected = totalEFTCollected;
	}

	public double getTotalEFTCollected() {
		return totalEFTCollected;
	}

	@Transient
	public String getEventInfo() {
		return formatDate.format(eventDate) + group.getName() + ":"
				+ formatTime.format(startTime) + "-"
				+ formatTime.format(endTime) + "|"
				+ ((id == null) ? "0" : id.toString());
	}

	@Transient
	public String getEventInfoAsNew() {
		return formatDate.format(eventDate) + group.getName() + ":"
				+ formatTime.format(startTime) + "-"
				+ formatTime.format(endTime) + "|0";
	}

	public void setReturnEvent(ProgramEvent returnEvent) {
		this.returnEvent = returnEvent;
	}

	@Transient
	public ProgramEvent getReturnEvent() {
		return returnEvent;
	}

	public void setCoordinator(StaffMember coordinator) {
		this.coordinator = coordinator;
	}

	@ManyToOne
	@JoinColumn(name = "coordinatorId")
	public StaffMember getCoordinator() {
		return coordinator;
	}

	@Transient
	public String getEventColor() {
		return eventColor;
	}

	public void setEventColor(String eventColor) {
		this.eventColor = eventColor;
	}

	@Transient
	public String getEventTitle() {
		return eventTitle;
	}

	public void setEventTitle(String eventTitle) {
		this.eventTitle = eventTitle;
	}

	@Transient
	public HashMap<Long, String> getStaffAvailabilityMap() {
		return staffAvailabilityMap;
	}

	public void setStaffAvailabilityMap(
			HashMap<Long, String> staffAvailabilityMap) {
		this.staffAvailabilityMap = staffAvailabilityMap;
	}

	public void setVehicleColor(String vehicleColor) {
		this.vehicleColor = vehicleColor;
	}

	@Transient
	public String getVehicleColor() {
		return vehicleColor;
	}

	public void setBankedDate(Date bankedDate) {
		this.bankedDate = bankedDate;
	}

	public Date getBankedDate() {
		return bankedDate;
	}

	public Boolean getOverridePrice() {
		return overridePrice;
	}

	public void setOverridePrice(Boolean overridePrice) {
		this.overridePrice = overridePrice;
	}



	/**
	 * public Date getActualReturnStartTime() { return actualReturnStartTime; }
	 * 
	 * public void setActualReturnStartTime(Date actualReturnStartTime) {
	 * this.actualReturnStartTime = actualReturnStartTime; }
	 * 
	 * public Date getActualReturnEndTime() { return actualReturnEndTime; }
	 * 
	 * public void setActualReturnEndTime(Date actualReturnEndTime) {
	 * this.actualReturnEndTime = actualReturnEndTime; }
	 **/

}