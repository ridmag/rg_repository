package com.itelasoft.pso.beans;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.hibernate.annotations.OrderBy;
import org.hibernate.annotations.Where;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : pso
//  @ Author : Tharindu
//
//

@Entity
@Table(name = "studentevents")
public class StudentEvent extends BaseEntity {
	private Long id;
	private ProgramEvent proEvent;
	private GroupedStudent groupedStudent;
	private double amountPaid, tmpAmount;
	private Transaction eventChargeTx;
	private List<Transaction> paymentTxs = new ArrayList<Transaction>();
	private List<Transaction> otherChargeTxs = new ArrayList<Transaction>();
	private boolean attended, tmpGST;
	private String remarks, tmpRemarks;
	private String paymentMethod;
	private StudentFundingSource stdFundingSrc;
	private double remainingHours;	

	private List<Transaction> tmpTxList = new ArrayList<Transaction>();

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public double getAmountPaid() {
		return amountPaid;
	}

	public void setAmountPaid(double amountPaid) {
		this.amountPaid = amountPaid;
	}

	public boolean isAttended() {
		return attended;
	}

	public void setAttended(boolean attended) {
		this.attended = attended;
	}

	public String getRemarks() {
		return remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	public void setEventChargeTx(Transaction eventChargeTx) {
		this.eventChargeTx = eventChargeTx;
	}

	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "chargeTxId")
	public Transaction getEventChargeTx() {
		return eventChargeTx;
	}

	@OneToMany(mappedBy = "studentEvent")
	@OrderBy(clause = "transactionDate")
	@Where(clause = "transactionType = 'DEBIT'")
	@Cascade(value = { org.hibernate.annotations.CascadeType.DELETE_ORPHAN,
			org.hibernate.annotations.CascadeType.SAVE_UPDATE })
	@LazyCollection(value = LazyCollectionOption.FALSE)
	public List<Transaction> getPaymentTxs() {
		return paymentTxs;
	}

	public void setPaymentTxs(List<Transaction> paymentTxs) {
		this.paymentTxs = paymentTxs;
	}

	@OneToMany(mappedBy = "studentEvent")
	@OrderBy(clause = "transactionDate")
	@Where(clause = "transactionType = 'CREDIT' and chargeType != 'EVENT'")
	@Cascade(value = { org.hibernate.annotations.CascadeType.DELETE_ORPHAN,
			org.hibernate.annotations.CascadeType.SAVE_UPDATE })
	@LazyCollection(value = LazyCollectionOption.FALSE)
	public List<Transaction> getOtherChargeTxs() {
		return otherChargeTxs;
	}

	public void setOtherChargeTxs(List<Transaction> otherChargeTxs) {
		this.otherChargeTxs = otherChargeTxs;
	}

	public void setGroupedStudent(GroupedStudent groupedStudent) {
		this.groupedStudent = groupedStudent;
	}

	@ManyToOne
	@JoinColumn(name = "groupedstudentId")
	public GroupedStudent getGroupedStudent() {
		return groupedStudent;
	}

	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	@Transient
	public String getPaymentMethod() {
		return paymentMethod;
	}

	public void setTmpAmount(double tmpAmount) {
		this.tmpAmount = tmpAmount;
	}

	@Transient
	public double getTmpAmount() {
		return tmpAmount;
	}

	@Transient
	public String getTmpRemarks() {
		return tmpRemarks;
	}

	public void setTmpRemarks(String tmpRemarks) {
		this.tmpRemarks = tmpRemarks;
	}

	@Transient
	public double getTotalCharges() {
		double total = 0;
		if (eventChargeTx != null)
			total = total + eventChargeTx.getAmount();
		if (otherChargeTxs != null) {
			for (Transaction tx : otherChargeTxs)
				total = total + tx.getAmount();
		}
		return total;
	}

	@Transient
	public double getTotalPayments() {
		double total = 0;
		if (paymentTxs != null) {
			for (Transaction tx : paymentTxs)
				if (!tx.getPaymentType().equals(EnumPaymentType.COLLECTION))
					total = total + tx.getAmount();
		}
		return total;
	}

	public void setTmpGST(boolean tmpGST) {
		this.tmpGST = tmpGST;
	}

	@Transient
	public boolean isTmpGST() {
		return tmpGST;
	}

	public void setStdFundingSrc(StudentFundingSource stdFundingSrc) {
		this.stdFundingSrc = stdFundingSrc;
	}

	@ManyToOne
	@JoinColumn(name = "studentFundingSourceId")
	public StudentFundingSource getStdFundingSrc() {
		return stdFundingSrc;
	}

	public void setRemainingHours(double remainingHours) {
		this.remainingHours = remainingHours;
	}

	@Transient
	public double getRemainingHours() {
		return remainingHours;
	}

	public void setProEvent(ProgramEvent proEvent) {
		this.proEvent = proEvent;
	}

	@ManyToOne
	@JoinColumn(name = "eventId")
	public ProgramEvent getProEvent() {
		return proEvent;
	}

	@Transient
	public List<Transaction> getTmpTxList() {
		return tmpTxList;
	}

	public void setTmpTxList(List<Transaction> tmpTxList) {
		this.tmpTxList = tmpTxList;
	}

}
